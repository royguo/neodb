#include "io.h"

#include <fcntl.h>
#include <unistd.h>

#include <memory>

#include "gtest/gtest.h"
#include "utils.h"

namespace neodb {
class IOTest : public ::testing::Test {
 public:
  void SetUp() override {}

  void TearDown() override {
    // Delete all files that was generated by this UT.
    for (auto& name : filenames_) {
      RemoveFile(name);
    }
  }

  std::string CreateRandomFile(uint32_t sz) {
    auto filename = FileUtils::GenerateRandomFile("io_test_file_", sz);
    filenames_.emplace_back(filename);
    return filename;
  }

  static bool RemoveFile(const std::string& filename) {
    return FileUtils::DeleteFile(filename);
  }

 private:
  std::vector<std::string> filenames_;
};

TEST_F(IOTest, SingleWriteTest) {
  auto filename = CreateRandomFile(1UL << 30);
  FileIOHandle io_handle(filename);

  auto buf = std::make_shared<IOBuf>((10));
  buf->Append("1234567890");
  Status s = io_handle.Write(0, 10, buf);
  EXPECT_TRUE(s.ok());
  buf->Reset();
  io_handle.Read(0, 10, buf);
  EXPECT_EQ(buf->Data(), "1234567890");
  RemoveFile(filename);
}

TEST_F(IOTest, MultiWriteTest) {
  auto filename = CreateRandomFile(1UL << 30);
  FileIOHandle io_handle(filename);
  std::vector<std::string> values;

  // Write
  for (int i = 0; i < 10; ++i) {
    auto buf = std::make_shared<IOBuf>((10UL << 10));
    values.emplace_back(StringUtils::GenerateRandomString(10UL << 10));
    buf->Append(values.back());
    // Write 10KB each 100MB offset.
    io_handle.Write(i * (100UL << 20), 10UL << 10, buf);
  }

  // Read & Check
  for (int i = 0; i < 10; ++i) {
    auto buf = std::make_shared<IOBuf>(10UL << 10);
    io_handle.Read(i * (100UL << 20), 10UL << 10, buf);
    EXPECT_EQ(buf->Data(), values[i]);
  }

  RemoveFile(filename);
}

int main(int argc, char** argv) {
  // testing::InstallFailureSignalHandler();
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
}  // namespace neodb
